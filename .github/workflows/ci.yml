name: ci

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests-api:
    runs-on: ubuntu-latest
    permissions: { contents: read }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-api-${{ runner.os }}-${{ hashFiles('API/requirements_dev.txt') }}
      - name: Install dev deps (API)
        working-directory: API
        run: pip install -r requirements_dev.txt

  tests-client-e2e:
    needs: tests-api
    runs-on: ubuntu-latest
    permissions: { contents: read }
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-api-${{ runner.os }}-${{ hashFiles('API/requirements_dev.txt') }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-client-${{ runner.os }}-${{ hashFiles('client/requirements_client.txt') }}
      - name: Install all dependencies (API + Client + Tests)
        run: |
          pip install -r API/requirements_dev.txt
          pip install -r client/requirements_client.txt
          pip install -U pytest pytest-playwright playwright
      - name: Install Playwright browsers
        run: python -m playwright install --with-deps chromium
      - name: Run E2E tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          API_STATIC_KEY: ${{ secrets.API_STATIC_KEY }}
          JWT_SECRET:  ${{ secrets.JWT_SECRET }}
          E2E_STARTUP_TIMEOUT: "120"
          E2E: "1"
          DATABASE_URL: "postgresql+psycopg2://testuser:testpassword@127.0.0.1:5432/testdb"
        run: pytest -q client/tests/test_streamlit.py

  build-and-push:
    needs: [tests-api, tests-client-e2e]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # API
      - name: Build & push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./API/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-api:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-api:buildcache,mode=max

      # Client
      - name: Build & push Client (Streamlit) image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          file: ./client/streamlit.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-client:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-client:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-client:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-client:buildcache,mode=max

      # MLflow
      - name: Build & push MLflow image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./mlflow.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-mlflow:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-mlflow:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-mlflow:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-mlflow:buildcache,mode=max

      # Monitor
      - name: Build & push Monitor image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./monitor.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-monitor:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-monitor:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-monitor:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-monitor:buildcache,mode=max

  deploy-local:
    needs: build-and-push
    runs-on: [self-hosted, local, windows]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: DÃ©ployer localement (pull & up)
        env:
          IMAGE_TAG: ${{ github.sha }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        shell: cmd
        run: |
          cd /d "%USERPROFILE%\app"
          echo %DOCKERHUB_TOKEN% | docker login -u %DOCKERHUB_USERNAME% --password-stdin
          for /f "tokens=*" %%i in ('docker network ls --format "{{.Name}}" ^| findstr /r "^data_network$"') do set found=1
          if not defined found docker network create data_network
          docker compose --env-file .env pull
          docker compose --env-file .env up -d
          docker image prune -f
          docker compose ps
