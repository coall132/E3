name: ci

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests-api:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip (API)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-api-${{ runner.os }}-${{ hashFiles('API/requirements_dev.txt') }}

      - name: Install dev deps (API)
        working-directory: API
        run: pip install -r requirements_dev.txt

  tests-client-e2e:
    needs: tests-api
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip (client)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-client-${{ runner.os }}-${{ hashFiles('client/requirements_client.txt') }}
      
      - name: Build API image
        run: docker build -t api-test -f API/Dockerfile --target dev .

      - name: Run API container
        run: |
          docker run -d --rm --name api-test \
            -p 8000:8000 \
            -e SKIP_RANK_MODEL=1 \
            -e DISABLE_WARMUP=1 \
            -e API_STATIC_KEY=${{ secrets.API_STATIC_KEY }} \
            -e DATABASE_URL="sqlite+pysqlite:////tmp/test.db"  \
            api-test
          for i in {1..40}; do
            if curl -fsS http://127.0.0.1:8000/ >/dev/null; then
              echo "API up"; break; fi
            sleep 2
            docker logs api-test --tail 80 || true
            if [ $i -eq 40 ]; then docker logs api-test; exit 1; fi
          done

      - name: Export E2E_API_BASE
        run: echo "E2E_API_BASE=http://127.0.0.1:8000" >> $GITHUB_ENV
      
      - name: Install client deps + pytest
        run: |
          pip install -r client/requirements_client.txt
          pip install -U pytest pytest-playwright playwright

      - name: Install Playwright browsers (Python)
        run: |
          python -m playwright install --with-deps chromium

      - name: Run E2E tests (client)
        working-directory: client
        env:
          PYTHONPATH: ${{ github.workspace }}
          API_STATIC_KEY: ${{ secrets.API_STATIC_KEY }}
          E2E_STARTUP_TIMEOUT: "120"
          E2E: "1"
        run: pytest -q

  build-and-push:
    needs: [tests-api, tests-client-e2e]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- Build & push API image ---
      - name: Build & push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./API/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-api:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-api:buildcache,mode=max

      # --- Build & push Streamlit client image ---
      - name: Build & push Client (Streamlit) image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          file: ./client/Dockerfile.streamlit
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-client:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/restaurant-client:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-client:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/restaurant-client:buildcache,mode=max
